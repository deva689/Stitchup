'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = exports.Media = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _resizeObserverPolyfill = require('resize-observer-polyfill');

var _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);

var _json2mq = require('json2mq');

var _json2mq2 = _interopRequireDefault(_json2mq);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {
  return null;
};

function matchProps(matches, propQueries) {
  var matchedProps = void 0;
  Object.keys(propQueries).forEach(function (key) {
    if (matches[key] || key === 'default') {
      var props = propQueries[key];
      if ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) === 'object') {
        matchedProps = _extends({}, matchedProps, props);
      } else {
        matchedProps = props;
      }
    }
  });
  return matchedProps;
}

var Media = exports.Media = function (_Component) {
  _inherits(Media, _Component);

  function Media() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Media);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Media.__proto__ || Object.getPrototypeOf(Media)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      matches: {}
    }, _this._updateMatches = function () {
      var matches = Object.keys(_this._queryLists).reduce(function (matches, key) {
        var queryList = _this._queryLists[key];
        return _extends({}, matches, _defineProperty({}, key, queryList.matches));
      }, {});
      _this.setState({ matches: matches });
    }, _this._resolve = function (propQueries) {
      return matchProps(_this.state.matches, propQueries);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Media, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') return;

      var queries = this.props.queries;


      this._queryLists = Object.keys(queries).reduce(function (queryLists, key) {
        var queryList = window.matchMedia((0, _json2mq2.default)(queries[key]));
        queryList.addListener(_this2._updateMatches);
        queryLists[key] = queryList;
        return queryLists;
      }, {});

      this._updateMatches();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this3 = this;

      Object.keys(this._queryLists).forEach(function (key) {
        return _this3._queryLists[key].removeListener(_this3._updateMatches);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children({
        matches: this.state.matches,
        resolve: this._resolve
      });
    }
  }]);

  return Media;
}(_react.Component);

Media.propTypes = {
  queries: _propTypes2.default.object,
  onUpdate: _propTypes2.default.func
};
Media.defaultProps = {
  queries: {},
  onUpdate: noop
};


function matchQueries(queries, _ref2) {
  var width = _ref2.width,
      height = _ref2.height;

  var matchedQueries = {};

  Object.keys(queries).forEach(function (key) {
    var _queries$key = queries[key],
        _queries$key$minWidth = _queries$key.minWidth,
        minWidth = _queries$key$minWidth === undefined ? 0 : _queries$key$minWidth,
        _queries$key$maxWidth = _queries$key.maxWidth,
        maxWidth = _queries$key$maxWidth === undefined ? Infinity : _queries$key$maxWidth,
        _queries$key$minHeigh = _queries$key.minHeight,
        minHeight = _queries$key$minHeigh === undefined ? 0 : _queries$key$minHeigh,
        _queries$key$maxHeigh = _queries$key.maxHeight,
        maxHeight = _queries$key$maxHeigh === undefined ? Infinity : _queries$key$maxHeigh;


    matchedQueries[key] = minWidth <= width && width <= maxWidth && minHeight <= height && height <= maxHeight;
  });

  return matchedQueries;
}

function getDimensions(node) {
  var d = node.getBoundingClientRect();
  return {
    width: d.width,
    height: d.height
  };
}

var Container = exports.Container = function (_Component2) {
  _inherits(Container, _Component2);

  function Container() {
    var _ref3;

    var _temp2, _this4, _ret2;

    _classCallCheck(this, Container);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this4 = _possibleConstructorReturn(this, (_ref3 = Container.__proto__ || Object.getPrototypeOf(Container)).call.apply(_ref3, [this].concat(args))), _this4), _this4.state = {
      matches: {}
    }, _this4._updateMatches = function () {
      var dimensions = getDimensions(_this4._node);
      _this4.setState({
        matches: matchQueries(_this4.props.queries, dimensions)
      });
      _this4.props.onUpdate(dimensions);
    }, _this4._ref = function (component) {
      _this4._node = component;
    }, _this4._resolve = function (propQueries) {
      return matchProps(_this4.state.matches, propQueries);
    }, _temp2), _possibleConstructorReturn(_this4, _ret2);
  }

  _createClass(Container, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') return;

      if (this._node) {
        this._resizeObserver = new _resizeObserverPolyfill2.default(this._updateMatches);
        this._resizeObserver.observe(this._node);
        this._updateMatches();
      } else {
        console.error('No ref found, attach the `containerRef` prop passed back in the child function to the component you want to measure.');
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.resizeObserver && this._node) {
        this.resizeObserver.disconnect(this._node);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children({
        containerRef: this._ref,
        matches: this.state.matches,
        resolve: this._resolve
      });
    }
  }]);

  return Container;
}(_react.Component);

Container.propTypes = {
  queries: _propTypes2.default.object,
  onUpdate: _propTypes2.default.func
};
Container.defaultProps = {
  queries: {},
  onUpdate: noop
};
exports.default = { Media: Media, Container: Container };