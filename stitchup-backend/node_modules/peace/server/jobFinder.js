(function() {
    var gen1_promisify = function(fn) {
        return new Promise(function(onFulfilled, onRejected) {
            fn(function(error, result) {
                if (error) {
                    onRejected(error);
                } else {
                    onFulfilled(result);
                }
            });
        });
    };
    var self = this;
    var log, error, Mocha, glob, path, pogo, testFullTitle;
    log = require("debug")("peace:jobFinder");
    error = require("debug")("peace:jobFinder:error");
    Mocha = require("mocha/lib/mocha");
    glob = require("glob");
    path = require("path");
    pogo = require("pogo");
    testFullTitle = require("./testFullTitle");
    module.exports = function(testsPath) {
        var self = this;
        var mocha, gen2_asyncResult, files, gen3_items, gen4_i, file, suite, tests;
        return new Promise(function(gen5_onFulfilled) {
            mocha = new Mocha({});
            log("Get tests in path " + testsPath);
            gen5_onFulfilled(gen1_promisify(function(gen6_callback) {
                return glob(testsPath + "/**/*.+(js|pogo)", gen6_callback);
            }).then(function(gen2_asyncResult) {
                files = gen2_asyncResult;
                gen3_items = files;
                for (gen4_i = 0; gen4_i < gen3_items.length; ++gen4_i) {
                    file = gen3_items[gen4_i];
                    try {
                        log("Add file " + file);
                        mocha.files.push(file);
                        suite = mocha.suite;
                        suite.emit("pre-require", global, file, mocha);
                        suite.emit("require", require(file), file, mocha);
                        suite.emit("post-require", global, file, mocha);
                        log("Added file " + file);
                    } catch (e) {
                        log("Failed to add file " + file + " - " + e);
                        throw e;
                    }
                }
                log("All files loaded");
                tests = [];
                mocha.suite.eachTest(function(test) {
                    if (!test.pending) {
                        return tests.push({
                            src: path.relative(testsPath, test.file),
                            name: testFullTitle(test)
                        });
                    }
                });
                return tests;
            }));
        });
    };
}).call(this);