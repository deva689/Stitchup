(function() {
    var gen1_promisify = function(fn) {
        return new Promise(function(onFulfilled, onRejected) {
            fn(function(error, result) {
                if (error) {
                    onRejected(error);
                } else {
                    onFulfilled(result);
                }
            });
        });
    };
    var self = this;
    var log, express, cors, bodyParser, compression, path, jobFinder, pogoify, glob, http, socketIO, distPath;
    log = require("debug")("peace:server");
    express = require("express");
    cors = require("cors");
    bodyParser = require("body-parser");
    compression = require("compression");
    path = require("path");
    jobFinder = require("./jobFinder");
    pogoify = require("pogoify");
    glob = require("glob");
    http = require("http");
    socketIO = require("socket.io");
    distPath = path.resolve(__dirname, "../dist");
    module.exports = function(testsFolder) {
        var self = this;
        var results, jobs, availableJobs, app, httpServer, socketServer;
        console.log("Initialising server with folder " + testsFolder);
        results = {};
        jobs = void 0;
        availableJobs = [];
        app = express();
        app.use(compression());
        app.use(cors());
        app.set("etag", false);
        httpServer = http.createServer(app);
        socketServer = socketIO(httpServer);
        socketServer.on("error", function(e) {
            return log("socker error", e);
        });
        app.get("/init", function(req, res) {
            var gen2_asyncResult;
            return new Promise(function(gen3_onFulfilled) {
                log("Init received");
                gen3_onFulfilled(Promise.resolve(function() {
                    if (!jobs) {
                        return new Promise(function(gen3_onFulfilled) {
                            gen3_onFulfilled(Promise.resolve(jobFinder(testsFolder)).then(function(gen4_asyncResult) {
                                return jobs = gen4_asyncResult;
                            }));
                        });
                    }
                }()).then(function(gen2_asyncResult) {
                    gen2_asyncResult;
                    availableJobs = jobs.slice(0);
                    log("Init complete");
                    log(availableJobs.length + " jobs available");
                    return res.send("done");
                }));
            });
        });
        socketServer.on("connection", function(socket) {
            log("agent connected");
            socket.on("ready-for-job", function(data) {
                var job;
                log("agent ready");
                job = availableJobs.shift();
                if (job) {
                    log("agent sent job");
                    return socket.emit("job", job);
                }
            });
            return socket.on("result", function(result) {
                log("Results received for " + result.name + ", passed: " + result.passed);
                results[result.name] = result;
                return socket.emit("result", result);
            });
        });
        app.get("/agent", function(req, res) {
            return res.send("\n      <html>\n      <head>\n        <script src='/agent.js'></script>\n        <script type='text/javascript'>\n          window.addEventListener('load', function(){\n            window.startAgent(document.body);\n          });\n        </script>\n      </head>\n      <body></body>\n      </html>\n    ");
        });
        app.get("/agent.js", function(req, res) {
            return res.sendFile(distPath + "/agent.js");
        });
        app.get("/results/:name", function(req, res) {
            var result;
            result = results[req.params.name] || {
                state: "execution-pending"
            };
            log("result requested for " + req.params.name + " - run: " + JSON.stringify(result));
            res.header("Cache-Control", "no-cache, no-store, must-revalidate");
            res.header("Pragma", "no-cache");
            res.header("Expires", 0);
            log("Results requested for " + req.params.name);
            return res.send(result);
        });
        app.get("/results", function(req, res) {
            res.header("Cache-Control", "no-cache, no-store, must-revalidate");
            res.header("Pragma", "no-cache");
            res.header("Expires", 0);
            return res.send(results);
        });
        app.get("/runner", function(req, res) {
            var src;
            src = decodeURIComponent(req.query.src);
            return res.send("<html>\n  <body>\n    <div id='mocha'></div>\n    <script src='log.js'></script>\n    <script src='mocha.js'></script>\n    <script src='mocha-reporter.js'></script>\n    <script>mocha.setup({ui: 'bdd', reporter: Remote})</script>\n    <script src='test?src=" + src + "'></script>\n    <script>mocha.run();</script>\n  </body>\n</html>");
        });
        app.get("/runner/mocha.js", function(req, res) {
            return res.sendFile(path.join(path.dirname(require.resolve("mocha")), "mocha.js"));
        });
        app.get("/runner/mocha-reporter.js", function(req, res) {
            return res.sendFile(distPath + "/mocha-reporter.js");
        });
        app.get("/runner/log.js", function(req, res) {
            return res.sendFile(distPath + "/log.js");
        });
        app.get("/runner/test", function(req, res) {
            var gen5_asyncResult, browserify, b, globals, errorHandler;
            return new Promise(function(gen3_onFulfilled) {
                gen3_onFulfilled(new Promise(function(gen3_onFulfilled) {
                    browserify = require("browserify");
                    b = browserify({
                        transform: pogoify,
                        extensions: [ ".pogo" ]
                    });
                    gen3_onFulfilled(gen1_promisify(function(gen6_callback) {
                        return glob(testsFolder + "/global.+(js|pogo)", gen6_callback);
                    }).then(function(gen7_asyncResult) {
                        globals = gen7_asyncResult;
                        b.add(globals);
                        b.add(testsFolder + "/" + decodeURIComponent(req.query.src));
                        errorHandler = function(e) {
                            console.log("bundle error", e);
                            return res.send(500, e);
                        };
                        return b.bundle().on("error", errorHandler).pipe(res);
                    }));
                }).then(void 0, function(e) {
                    return res.send(500, e);
                }));
            });
        });
        app.get("/runner/deps", function(req, res) {
            var f, mdeps, JSONStream, md;
            f = testsFolder + "/" + decodeURIComponent(req.query.src);
            mdeps = require("module-deps");
            JSONStream = require("JSONStream");
            md = mdeps();
            md.pipe(JSONStream.stringify()).pipe(res);
            md.write(f);
            return md.end();
        });
        return {
            http: httpServer,
            socket: socketServer,
            app: app
        };
    };
}).call(this);