'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _id = 0;
var uuid = exports.uuid = function uuid() {
  return _id++;
};
var createClassName = exports.createClassName = function createClassName() {
  return '_' + uuid().toString(36);
};

var Sheet = exports.Sheet = function Sheet() {
  var browser = typeof window !== 'undefined';

  if (!browser) {
    var serverSheet = {
      rules: [],
      insert: function insert(rule) {
        return serverSheet.rules.push(rule);
      },
      reset: function reset() {
        return serverSheet.rules = [];
      },
      get css() {
        return serverSheet.rules.join('');
      }
    };
    return serverSheet;
  }

  var tag = document.createElement('style');
  tag.id = '__cxs__';

  document.head.appendChild(tag);

  var sheet = tag.sheet;

  sheet.insert = function (rule) {
    var i = sheet.cssRules.length;
    sheet.insertRule(rule, i);
  };

  sheet.reset = function () {
    while (sheet.cssRules.length) {
      sheet.deleteRule(0);
    }
  };

  Object.defineProperty(sheet, 'css', {
    get: function get() {
      return [].concat(_toConsumableArray(sheet.cssRules)).map(function (rule) {
        return rule.cssText;
      }).join('');
    }
  });

  return sheet;
};

var cache = exports.cache = {};
var sheet = exports.sheet = Sheet();

var cxs = exports.cxs = function cxs(style) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var descendant = opts.descendant,
      media = opts.media;

  var key = [style, descendant, media, opts.className, opts.selector].join('_');

  if (cache[key]) return cache[key];

  var className = opts.className || createClassName();
  var selector = opts.selector || '.' + className;

  var css = createCSS(selector, style, descendant, media);
  sheet.insert(css);

  var rule = {
    toString: function toString() {
      return '' + className;
    },
    push: function push(style, opts) {
      return cxs(style, Object.assign(opts, { className: className }));
    },
    hover: function hover(style) {
      return cxs(style, { descendant: ':hover', className: className });
    },
    focus: function focus(style) {
      return cxs(style, { descendant: ':focus', className: className });
    },
    active: function active(style) {
      return cxs(style, { descendant: ':active', className: className });
    },
    disabled: function disabled(style) {
      return cxs(style, { descendant: ':disabled', className: className });
    },
    media: function media(_media, style) {
      return cxs(style, { media: _media, className: className });
    }
  };

  cache[key] = Object.assign({}, rule);

  return rule;
};

var createCSS = exports.createCSS = function createCSS(selector, declarations) {
  var descendant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var media = arguments[3];

  var rule = [selector, descendant, '{', declarations, '}'].join('');

  if (!media) return rule;

  return [media, '{', rule, '}'].join('');
};

Object.defineProperty(cxs, 'css', {
  get: function get() {
    return sheet.css;
  }
});

var reset = exports.reset = function reset() {
  sheet.reset();
  exports.cache = cache = {};
  _id = 0;
};

cxs.reset = reset;

exports.default = cxs;